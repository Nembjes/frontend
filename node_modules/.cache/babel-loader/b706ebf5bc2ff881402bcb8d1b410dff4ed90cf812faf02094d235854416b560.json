{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\frontend\\\\src\\\\components\\\\CartContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [cartItems, setCartItems] = useState([]);\n  const addToCart = async (itemId, quantity = 1) => {\n    try {\n      // Проверяем, есть ли уже продукт в корзине\n      const existingItem = cartItems.find(item => item.id === itemId);\n      if (existingItem) {\n        // Если продукт уже есть в корзине, увеличиваем количество\n        setCartItems(prevItems => prevItems.map(item => item.id === itemId ? {\n          ...item,\n          quantity: item.quantity + quantity\n        } : item));\n      } else {\n        // Иначе добавляем новый продукт в корзину\n        const response = await axios.get(`http://localhost:5000/products/${itemId}`);\n        const newItem = {\n          ...response.data,\n          quantity\n        };\n        setCartItems(prevItems => [...prevItems, newItem]);\n      }\n    } catch (error) {\n      console.error('Error fetching product:', error);\n    }\n  };\n  const removeFromCart = itemId => {\n    setCartItems(prevItems => prevItems.filter(item => item.id !== itemId));\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cartItems,\n      addToCart,\n      removeFromCart\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"jeyeRm/hZ/3zvXF4PAYTLSHDNRs=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n};\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","axios","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","cartItems","setCartItems","addToCart","itemId","quantity","existingItem","find","item","id","prevItems","map","response","get","newItem","data","error","console","removeFromCart","filter","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","context","Error","$RefreshReg$"],"sources":["D:/project/frontend/src/components/CartContext.jsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst CartContext = createContext();\r\n\r\nexport const CartProvider = ({ children }) => {\r\n  const [cartItems, setCartItems] = useState([]);\r\n\r\n  const addToCart = async (itemId, quantity = 1) => {\r\n    try {\r\n      // Проверяем, есть ли уже продукт в корзине\r\n      const existingItem = cartItems.find((item) => item.id === itemId);\r\n\r\n      if (existingItem) {\r\n        // Если продукт уже есть в корзине, увеличиваем количество\r\n        setCartItems((prevItems) =>\r\n          prevItems.map((item) =>\r\n            item.id === itemId ? { ...item, quantity: item.quantity + quantity } : item\r\n          )\r\n        );\r\n      } else {\r\n        // Иначе добавляем новый продукт в корзину\r\n        const response = await axios.get(`http://localhost:5000/products/${itemId}`);\r\n        const newItem = { ...response.data, quantity };\r\n        setCartItems((prevItems) => [...prevItems, newItem]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching product:', error);\r\n    }\r\n  };\r\n\r\n  const removeFromCart = (itemId) => {\r\n    setCartItems((prevItems) => prevItems.filter((item) => item.id !== itemId));\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={{ cartItems, addToCart, removeFromCart }}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useCart = () => {\r\n  const context = useContext(CartContext);\r\n  if (!context) {\r\n    throw new Error('useCart must be used within a CartProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7E,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAE9C,MAAMY,SAAS,GAAG,MAAAA,CAAOC,MAAM,EAAEC,QAAQ,GAAG,CAAC,KAAK;IAChD,IAAI;MACF;MACA,MAAMC,YAAY,GAAGL,SAAS,CAACM,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKL,MAAM,CAAC;MAEjE,IAAIE,YAAY,EAAE;QAChB;QACAJ,YAAY,CAAEQ,SAAS,IACrBA,SAAS,CAACC,GAAG,CAAEH,IAAI,IACjBA,IAAI,CAACC,EAAE,KAAKL,MAAM,GAAG;UAAE,GAAGI,IAAI;UAAEH,QAAQ,EAAEG,IAAI,CAACH,QAAQ,GAAGA;QAAS,CAAC,GAAGG,IACzE,CACF,CAAC;MACH,CAAC,MAAM;QACL;QACA,MAAMI,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,GAAG,CAAE,kCAAiCT,MAAO,EAAC,CAAC;QAC5E,MAAMU,OAAO,GAAG;UAAE,GAAGF,QAAQ,CAACG,IAAI;UAAEV;QAAS,CAAC;QAC9CH,YAAY,CAAEQ,SAAS,IAAK,CAAC,GAAGA,SAAS,EAAEI,OAAO,CAAC,CAAC;MACtD;IACF,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF,CAAC;EAED,MAAME,cAAc,GAAId,MAAM,IAAK;IACjCF,YAAY,CAAEQ,SAAS,IAAKA,SAAS,CAACS,MAAM,CAAEX,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKL,MAAM,CAAC,CAAC;EAC7E,CAAC;EAED,oBACER,OAAA,CAACC,WAAW,CAACuB,QAAQ;IAACC,KAAK,EAAE;MAAEpB,SAAS;MAAEE,SAAS;MAAEe;IAAe,CAAE;IAAAnB,QAAA,EACnEA;EAAQ;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACzB,EAAA,CAnCWF,YAAY;AAAA4B,EAAA,GAAZ5B,YAAY;AAqCzB,OAAO,MAAM6B,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGrC,UAAU,CAACK,WAAW,CAAC;EACvC,IAAI,CAACgC,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}